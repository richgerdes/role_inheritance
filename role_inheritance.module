<?php

function role_inheritance_entity_type_build(array &$entity_types) {
  /**
   * Override entity storage class for user_role to allow for role inheritance
   * during priv validation
   */
  
  $entity_types['user_role']->setStorageClass('Drupal\role_inheritance\RoleInheritanceStorage');
}

/**
 * Helper Function for RoleInheritanceStorage class to extend based in inheritance
 */
function _role_inheritance_extendroles($rids){
  static $i = 0;
  $collapsed = _role_inheritance_roleMap(NULL, true);
  $extended = $rids;
  if($collapsed){
    foreach ($rids as $role){
      if(in_array($role, array_keys($collapsed))){
        $extended = array_merge($extended, $collapsed[$role]);
      }
    }
  }
  
  return $extended;
}

function _role_inheritance_roleMap_collpase($map, $collapse = array(), $role = NULL) {
  
  if ($role != NULL) {    
    if (in_array($role, array_keys($map))) {
      $collapse[$role] = $map[$role];
    } else {
      $collapse[$role] = array();
    }
    
    foreach ($map[$role] as $id) {      
      if (in_array($id, array_keys($map))) {
        if (!in_array($id, array_keys($collapse))) {
          $collapse = _role_inheritance_roleMap_collpase($map, $collapse, $id);
        }
        $collapse[$role] = array_merge($collapse[$role],$collapse[$id]);
      }
    }
    
  } else {
    foreach ($map as $id => $inherit) {
      if(!in_array($id, array_keys($collapse))) {
        $collapse = _role_inheritance_roleMap_collpase($map, $collapse, $id);
      }
    }
  }
  
  return $collapse;
}

function _role_inheritance_roleMap($updateMap = NULL, $collapse = false) {
  static $roleMap;
  static $roleMapCollapse;
  
  if ($updateMap) {
    $roleMap = $updateMap;

    $config = \Drupal::service('config.factory')->getEditable('role_inheritance.settings');
    $config->set('role_map', $roleMap);
    $config->save();

    $roleMapCollapse = _role_inheritance_roleMap_collpase($roleMap);

  } else if (!$roleMap) {
    $config = \Drupal::service('config.factory')->getEditable('role_inheritance.settings');
    $roleMap = $config->get('role_map');
  
    if (empty($roleMap) || !is_array($roleMap)) {
      $roleMap = array();

      $config->set('role_map', $roleMap);
      $config->save();
    }

    $roleMapCollapse = _role_inheritance_roleMap_collpase($roleMap);
  }
  
  if ($collapse) {
    return $roleMapCollapse;
  } else {
    return $roleMap;
  }
}
