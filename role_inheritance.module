<?php

/**
 * @file
 * Module to provide permission inheritance.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\user\Entity\Role;

/**
 * Helper Function for RoleInheritanceStorage class.
 *
 * Extends a list of role ids to include inherited ids.
 *
 * @param array $rids
 *   List of role ids to find inheritance of.
 * @param bool $inclusive
 *   Whether to include the values of $rids in the returned list.
 *
 * @return array
 *   List of role ids inherited from $rids.
 */
function _role_inheritance_extendroles(array $rids, $inclusive = TRUE) {
  $collapsed = _role_inheritance_role_map(NULL, TRUE);
  $extended = $rids;
  if ($collapsed) {
    foreach ($rids as $role) {
      if (in_array($role, array_keys($collapsed))) {
        $extended = array_merge($extended, $collapsed[$role]);
      }
    }
  }

  if ($inclusive) {
    return $extended;
  }
  else {
    return array_diff($extended, $rids);
  }
}

/**
 * Helper function for _role_inheritance_role_map().
 *
 * Helper function to collapse role relations when applying inheritance. Result
 * of this function is an associtive array of a role to the direct and indirect
 * roles it inherits from. Indirect inherited roles are those that one a role's
 * direct inherited roles inherits from that the parent role does not.
 *
 * EX. Admin inherits from Global Editor. And Global Editor inherits from
 * Writer. These are direct inheritance. Admin also inherits from Writer by
 * proxy through Global Editor. This relation is indirect inheritance.
 *
 * @param array $map
 *   Direct role inheritance mapping.
 * @param array $collapse
 *   Mapping of collapsed roles to append new data onto.
 * @param string $role
 *   Optional role id to process inheritance of.
 *
 * @return array
 *   Single dementional array where keys are mapped to a list of all roles they
 *   inherit from.
 */
function _role_inheritance_role_map_collpase(array $map, array $collapse = [], $role = NULL) {
  if ($role != NULL) {
    if (in_array($role, array_keys($map))) {
      $collapse[$role] = $map[$role];
    }
    else {
      $collapse[$role] = [];
    }

    foreach ($map[$role] as $id) {
      if (in_array($id, array_keys($map))) {
        if (!in_array($id, array_keys($collapse))) {
          $collapse = _role_inheritance_role_map_collpase($map, $collapse, $id);
        }
        $collapse[$role] = array_unique(array_merge($collapse[$role], $collapse[$id]));
      }
    }

  }
  else {
    foreach ($map as $id => $inherit) {
      if (!in_array($id, array_keys($collapse))) {
        $collapse = _role_inheritance_role_map_collpase($map, $collapse, $id);
      }
    }
  }
  return $collapse;
}

/**
 * Store and retrieve the role inheritance mapping.
 */
function _role_inheritance_role_map($updateMap = NULL, $collapse = FALSE) {
  static $roleMap;
  static $collapsedRoleMap;

  if ($updateMap) {
    $roleMap = array_filter($updateMap);

    $config = \Drupal::service('config.factory')->getEditable('role_inheritance.settings');
    $config->set('role_map', $roleMap);
    $config->save();

    $collapsedRoleMap = NULL;

  }
  elseif (!$roleMap) {
    $config = \Drupal::service('config.factory')->getEditable('role_inheritance.settings');
    $roleMap = $config->get('role_map');

    if (empty($roleMap) || !is_array($roleMap)) {
      $roleMap = [];

      $config->set('role_map', $roleMap);
      $config->save();
    }

    $collapsedRoleMap = NULL;
  }

  if ($collapse) {
    if ($collapsedRoleMap === NULL) {
      $collapsedRoleMap = _role_inheritance_role_map_collpase($roleMap);
    }
    return $collapsedRoleMap;
  }
  else {
    return $roleMap;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Adds role inheritance options to role edit/creation form.
 */
function role_inheritance_form_user_role_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $role_names = [];
  foreach (user_roles() as $role_name => $role) {
    // Retrieve role names for columns.
    $role_names[$role_name] = $role->label();
  }

  $role_mapping = _role_inheritance_role_map();

  if (isset($form['id']) && isset($form['id']['#default_value']) && $form['id']['#default_value']) {
    $inherits = $role_mapping[$form['id']['#default_value']];
  }

  $form['inheritance'] = [
    '#type' => 'checkboxes',
    '#title' => t('Inherits From Roles'),
    '#id' => 'role-inheritance',
    '#attributes' => ['class' => ['role-inheritance', 'js-role-inheritance']],
    '#sticky' => TRUE,
    '#options' => $role_names,
    '#default_value' => isset($inherits) ? $inherits : [],
    '#description' => t('Select the roles that this role should inherit permission grants from.'),
  ];

  $form['actions']['submit']['#submit'][] = 'role_inheritance_form_user_role_form_submit';
}

/**
 * Handle submission of user form to save role inheritance data.
 */
function role_inheritance_form_user_role_form_submit(&$form, FormStateInterface $form_state) {

  $values = $form_state->getValues();

  $mapping = _role_inheritance_role_map();
  $mapping[$values['id']] = array_filter($values['inheritance']);

  _role_inheritance_role_map($mapping);
}

/**
 * Implements hook_form_FORM_ID_insert().
 *
 * When adding a new role, we should set the default inheritance for that role.
 */
function role_inheritance_form_user_role_insert(EntityInterface $newRole) {
  $map = _role_inheritance_role_map();
  $map[$newRole->id()] = [AccountInterface::AUTHENTICATED_ROLE];
  $roles = user_roles();
  foreach ($roles as $rid => $role) {
    if ($role->isAdmin()) {
      $map[$rid][] = $newRole->id();
    }
  }
  _role_inheritance_role_map($map);
}

/**
 * Implements hook_user_role_delete().
 *
 * When deleting a role, cleanup inheritance map.
 */
function role_inheritance_form_user_role_delete(EntityInterface $role) {
  $map = _role_inheritance_role_map();
  $removed_id = $role->id();
  foreach ($map as $rid => $inherited) {
    $map[$rid] = array_diff($inherited, [$removed_id]);
  }
  if (isset($map[$removed_id])) {
    unset($map[$removed_id]);
  }
  _role_inheritance_role_map($map);
}

/**
 * Implements hook_ENTITY_TYPE_load().
 *
 * Extends the user role list when its being retrieved from the database. This
 * allows for better compatibility with modules that check user access but do
 * not rely on permissions to do so.
 *
 * As these extra roles are only temporary, we need to remove these additional
 * roles using hook_ENTITY_TYPE_presave.
 *
 * @see role_inheritance_user_presave()
 */
function role_inheritance_user_load($users) {
  foreach ($users as $user) {
    $rids = $user->getRoles();
    $extended = _role_inheritance_extendroles($rids, FALSE);
    // Store the list of extra roles so we can remove them.
    $user->_role_inheritance_extended_roles = $extended;
    foreach ($extended as $role) {
      if ($role != AccountInterface::AUTHENTICATED_ROLE
          && $role !== AccountInterface::ANONYMOUS_ROLE) {
        $user->addRole($role);
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 *
 * Removed inherited roles that were added in role_inheritance_user_load() so
 * they don't get saved to the database and permenetly added to the user.
 *
 * @see role_inheritance_user_load()
 */
function role_inheritance_user_presave(EntityInterface $user) {
  // Check if user has extended roles. IF so remove them.
  if (isset($user->_role_inheritance_extended_roles)) {
    $rids = $user->_role_inheritance_extended_roles;
    foreach ($rids as $role) {
      $user->removeRole($role);
    }
    unset($user->_role_inheritance_extended_roles);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Since role list is populated from $user->getRoles and we add inherited roles
 * in role_inheritance_user_load(), we need to remove these from the selected
 * list of roles.
 *
 * @see role_inheritance_user_load()
 */
function role_inheritance_form_user_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $user = $form_state->getFormObject()->getEntity();
  if (isset($form["account"]["roles"]["#default_value"]) && isset($user->_role_inheritance_extended_roles)) {
    $form["account"]["roles"]["#default_value"] = array_diff($form["account"]["roles"]["#default_value"], $user->_role_inheritance_extended_roles);

    // Set submission handler.
    array_unshift($form['actions']['submit']['#submit'], 'role_inheritance_form_user_form_submit');
  }
}

/**
 * Implements hook_form_submit().
 *
 * When form is submitted, we want to remove any newly added roles from the
 * list of inherited roles the user has, so that the new role will not get
 * removed by role_inheritance_user_presave and will acually get saved.
 *
 * @see role_inheritance_user_load()
 * @see role_inheritance_user_presave()
 * @see role_inheritance_form_user_form_alter()
 */
function role_inheritance_form_user_form_submit($form, FormStateInterface $form_state) {
  $values = $form_state->getValues();
  $user = $form_state->getFormObject()->getEntity();
  if (isset($values['roles']) && isset($user->_role_inheritance_extended_roles)) {
    $submitted_roles = $values['roles'];
    // Remove roles that were just added from extended role list.
    $user->_role_inheritance_extended_roles = array_diff($user->_role_inheritance_extended_roles, $submitted_roles);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Since role list is populated from $user->getRoles and we add inherited roles
 * in role_inheritance_user_load(), we need to remove these from the selected
 * list of roles.
 *
 * @see role_inheritance_user_load()
 */
function role_inheritance_form_role_delegation_role_assign_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $user = $form_state->getBuildInfo()['args'][0];
  if (isset($form["account"]["role_change"]["#default_value"]) && isset($user->_role_inheritance_extended_roles)) {
    $form["account"]["role_change"]["#default_value"] = array_diff($form["account"]["role_change"]["#default_value"], $user->_role_inheritance_extended_roles);

    if (!isset($form['actions']['submit']['#submit']) || !is_array($form['actions']['submit']['#submit'])) {
      $form['actions']['submit']['#submit'] = [];
    }
    // Set submission handler.
    array_unshift($form['actions']['submit']['#submit'], 'role_inheritance_form_role_delegation_role_assign_form_submit');
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * When form is submitted, we want to remove any newly added roles from the
 * list of inherited roles the user has, so that the new role will not get
 * removed by role_inheritance_user_presave and will acually get saved.
 *
 * @see role_inheritance_user_load()
 * @see role_inheritance_user_presave()
 * @see role_inheritance_form_role_delegation_role_assign_form_alter()
 */
function role_inheritance_form_role_delegation_role_assign_form_submit($form, FormStateInterface $form_state) {
  $values = $form_state->getValues();
  $user = $form_state->getBuildInfo()['args'][0];
  if (isset($values['role_change']) && isset($user->_role_inheritance_extended_roles)) {
    $submitted_roles = $values['role_change'];
    // Remove roles that were just added from extended role list.
    $user->_role_inheritance_extended_roles = array_diff($user->_role_inheritance_extended_roles, $submitted_roles);
  }
}

/**
 * Simplify a list of roles, to remove roles that receive inherited info.
 *
 * Removes roles from the list if one or more roles inherit form the role.
 *
 * Usage Example: Content only needs to have lowest roles in the tree, and
 * through role inheritance, the other roles higher will be provided.
 *
 * @param array $roles
 *   A list of roles reduce.
 *
 * @see _role_inheritance_remove_inherited()
 *
 * @return array
 *   $roles minus any roles inherted by others in the list.
 */
function _role_inheritance_remove_receivers(array $roles) {
  $inheritanceMapCollapsed = _role_inheritance_role_map(NULL, TRUE);

  $providable_roles = $roles;
  $removable_roles = $roles;

  foreach ($providable_roles as $providable_role) {
    // If source role, is not already removed.
    if (in_array($providable_role, $roles)) {
      foreach ($removable_roles as $removable_role) {
        // Don't remove current role.
        if ($providable_role !== $removable_role
        // If target role, is not already removed.
            && ($key = array_search($removable_role, $roles)) !== FALSE
        // And removable_role grants providable_role.
            && in_array($providable_role, $inheritanceMapCollapsed[$removable_role])) {
          // Remove target role.
          unset($roles[$key]);
        }
      }
    }
  }

  return $roles;
}

/**
 * Simplify a list of roles, to remove roles that are inherited from others.
 *
 * Removes roles that are inherited from one or more roles in the original role
 * list, to provide the smallest list of roles needed to achieve the same list
 * when inheritance is applied.
 *
 * Usage Example: Users only need the highest roles in a tree, and via role
 * inheritance roles below those will also be given to the user.
 *
 * @param array $roles
 *   A list of roles reduce.
 *
 * @see _role_inheritance_remove_providers()
 *
 * @return array
 *   $roles minus any roles that inherit from others in the list.
 */
function _role_inheritance_remove_inherited(array $roles) {
  $inheritanceMapCollapsed = _role_inheritance_role_map(NULL, TRUE);

  $providers = $roles;
  $removable_roles = $roles;

  foreach ($providers as $provider_role) {
    // If source role, is not already removed.
    if (in_array($provider_role, $roles)) {
      foreach ($removable_roles as $removable_role) {
        // Don't remove current role.
        if ($provider_role !== $removable_role
        // If target role, is not already removed.
            && ($key = array_search($removable_role, $roles)) !== FALSE
        // And provider_role grants removable_role.
            && in_array($removable_role, $inheritanceMapCollapsed[$provider_role])) {
          // Remove target role.
          unset($roles[$key]);
        }
      }
    }
  }

  return $roles;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Require the js script to show role inheritance on the permissions table, and
 * setup automation.
 */
function role_inheritance_form_user_admin_permissions_alter(&$form, FormStateInterface $form_state, $form_id) {
  $inheritanceMapCollapsed = _role_inheritance_role_map(NULL, TRUE);
  // Mapp of each permission for a role, and what roles they are inherited from.
  $inheritedPermissions = [];
  // Mapping of a role and what role inherit from it.
  $providers = [];

  foreach ($inheritanceMapCollapsed as $rid => $inherit_from) {
    foreach ($inherit_from as $provider) {
      $providers[$provider][] = $rid;

      $role = Role::load($provider);
      if ($role === NULL) {
        continue;
      }

      $provider_permissions = $role->getPermissions();
      foreach ($provider_permissions as $permission) {
        $inheritedPermissions[$rid][$permission][] = $provider;
      }
    }
  }

  // Remove user.permissions library since it, just provides inheritcance of
  // the authenticated user role by all other roles.
  $form['#attached']['library'] = array_diff($form['#attached']['library'], ['user/drupal.user.permissions']);
  $form['#attached']['library'][] = 'role_inheritance/role_inheritance.permissions';
  $form['#attached']['drupalSettings']['role_inheritance']['map'] = $inheritanceMapCollapsed;
  $form['#attached']['drupalSettings']['role_inheritance']['inherited'] = $inheritedPermissions;
  $form['#attached']['drupalSettings']['role_inheritance']['providers'] = $providers;
}
