<?php

/**
 * @file
 * Module to provide permission inheritance.
 */

use \Drupal\Core\Form\FormStateInterface;
use \Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_entity_type_build().
 */
function role_inheritance_entity_type_build(array &$entity_types) {
  // Override entity storage class for user_role to allow for role inheritance
  // during $user->hasPermission() (by altering isPermissionInRoles()).
  $entity_types['user_role']->setStorageClass('Drupal\role_inheritance\RoleInheritanceStorage');
}

/**
 * Helper Function for RoleInheritanceStorage class.
 *
 * Extends a list of role ids to include inherited ids.
 *
 * @param array $rids
 *   list of role ids to find inheritance of.
 * @param bool $inclusive
 *   Whether to include the values of $rids in the returned list.
 *
 * @return array
 *   list of role ids inherited from $rids.
 */
function _role_inheritance_extendroles($rids, $inclusive = true) {
  static $i = 0;
  $collapsed = _role_inheritance_role_map(NULL, TRUE);
  $extended = $rids;
  if ($collapsed) {
    foreach ($rids as $role) {
      if (in_array($role, array_keys($collapsed))) {
        $extended = array_merge($extended, $collapsed[$role]);
      }
    }
  }

  if ($inclusive) {
    return $extended;
  } else {
    return array_diff($extended, $rids);
  }
}

/**
 * Helper function for _role_inheritance_role_map().
 *
 * Helper function to collapse role relations when applying inheritance. Result
 * of this function is an associtive array of a role to the direct and indirect
 * roles it inherits from. Indirect inheirted roles are those that one a role's
 * direct inheirted roles inheirts from that the parent role does not.
 *
 * EX. Admin inheirts from Global Editor. And Global Editor inheirts from
 * Writer. These are direct inheirtance. Admin also inherits from Writer by
 * proxy through Global Editor. This relation is indirect inheritance.
 *
 * @param array $map
 *   Original direct role inheirtance mapping.
 * @param array $collapse
 *   Mapping of collapsed roles to append new data onto.
 * @param string $role
 *   Optional role id to process inheirtance of.
 *
 * @return array
 *   Single dementional array where keys are mapped to a list of all roles they
 *   inherit from.
 */
function _role_inheritance_role_map_collpase($map, $collapse = array(), $role = NULL) {
  if ($role != NULL) {
    if (in_array($role, array_keys($map))) {
      $collapse[$role] = $map[$role];
    }
    else {
      $collapse[$role] = array();
    }

    foreach ($map[$role] as $id) {
      if (in_array($id, array_keys($map))) {
        if (!in_array($id, array_keys($collapse))) {
          $collapse = _role_inheritance_role_map_collpase($map, $collapse, $id);
        }
        $collapse[$role] = array_merge($collapse[$role], $collapse[$id]);
      }
    }

  }
  else {
    foreach ($map as $id => $inherit) {
      if (!in_array($id, array_keys($collapse))) {
        $collapse = _role_inheritance_role_map_collpase($map, $collapse, $id);
      }
    }
  }
  return $collapse;
}

/**
 * Store and retrieve the role inheritance mapping.
 */
function _role_inheritance_role_map($updateMap = NULL, $collapse = FALSE) {
  static $roleMap;
  static $collapsedRoleMap;

  if ($updateMap) {
    $roleMap = array_filter($updateMap);

    $config = \Drupal::service('config.factory')->getEditable('role_inheritance.settings');
    $config->set('role_map', $roleMap);
    $config->save();

    $collapsedRoleMap = NULL;

  }
  elseif (!$roleMap) {
    $config = \Drupal::service('config.factory')->getEditable('role_inheritance.settings');
    $roleMap = $config->get('role_map');

    if (empty($roleMap) || !is_array($roleMap)) {
      $roleMap = array();

      $config->set('role_map', $roleMap);
      $config->save();
    }

    $collapsedRoleMap = NULL;
  }

  if ($collapse) {
    if ($collapsedRoleMap === NULL) {
      $collapsedRoleMap = _role_inheritance_role_map_collpase($roleMap);
    }
    return $collapsedRoleMap;
  }
  else {
    return $roleMap;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Adds role inheirtance options to role edit/creation form.
 */
function role_inheritance_form_user_role_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $role_names = array();
  foreach (user_roles() as $role_name => $role) {
    // Retrieve role names for columns.
    $role_names[$role_name] = $role->label();
  }

  $role_mapping = _role_inheritance_role_map();

  if (isset($form['id']) && isset($form['id']['#default_value']) && $form['id']['#default_value']) {
    $inherits = $role_mapping[$form['id']['#default_value']];
  }

  $form['inheritance'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Inherits From Roles'),
    '#id' => 'role-inheritance',
    '#attributes' => ['class' => ['role-inheritance', 'js-role-inheritance']],
    '#sticky' => TRUE,
    '#options' => $role_names,
    '#default_value' => isset($inherits) ? $inherits : array(),
    '#description' => t('Select the roles that this role should inherit permission grants from.'),
  );

  $form['actions']['submit']['#submit'][] = 'role_inheritance_form_user_role_form_submit';
}

/**
 * Handle submission of user form to save role Inheirtance data.
 */
function role_inheritance_form_user_role_form_submit(&$form, FormStateInterface $form_state) {

  $values = $form_state->getValues();
  $roles = array_keys(user_roles());

  $mapping = _role_inheritance_role_map();
  $mapping[$values['id']] = array_filter($values['inheritance']);

  _role_inheritance_role_map($mapping);
}

/**
 * Implements hook_ENTITY_TYPE_load().
 *
 * Extends the user role list when its being retrieved from the database. This
 * allows for better compatibility with modules that check user access but do
 * not rely on permissions to do so.
 *
 * As these extra roles are only temporary, we need to remove these additional
 * roles using hook_ENTITY_TYPE_presave.
 *
 * @see role_inheritance_user_presave()
 */
function role_inheritance_user_load($users) {
  foreach ($users as $uid => $user) {
    $rids = $user->getRoles();
    $extended = _role_inheritance_extendroles($rids, false);
    // store the list of extra roles so we can remove them.
    $user->_role_inheritance_extended_roles = $extended;
    foreach ($extended as $role) {
      $user->addRole($role);
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 *
 * Removed inheirted roles that were added in role_inheritance_user_load() so
 * they don't get saved to the database and permenetly added to the user.
 *
 * @see role_inheritance_user_load()
 */
function role_inheritance_user_presave(EntityInterface $user) {
  // check if user has extended roles. IF so remove them.
  if (isset($user->_role_inheritance_extended_roles)) {
    $rids = $user->_role_inheritance_extended_roles;
    foreach ($rids as $role) {
      $user->removeRole($role);
    }
    unset($user->_role_inheritance_extended_roles);
  }
}
